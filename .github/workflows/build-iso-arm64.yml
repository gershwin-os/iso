name: Build ISO on Debian 12 ARM64

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          os: [ubuntu-latest]
          arch: [arm64]
    container:
      image: ghcr.io/gershwin-os/builder-arm64:main
      options: >-
        --privileged
        --name debian
      ports:
        - 8080:8080
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run commands
        uses: uraimo/run-on-arch-action@v2
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu22.04    
          # Set an output parameter `uname` for use in subsequent steps
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)
      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
      - name: Get latest ARM64 workflow run ID
        id: get_latest_arm64_run
        run: |
          arm64_response=$(curl -s -X GET -u ${{ secrets.GH_TOKEN }} "https://api.github.com/repos/gershwin-os/root/actions/workflows/build_root_arm64.yml/runs?status=success&per_page=1")
          echo "ARM64 API response: $arm64_response"
          latest_run_arm64=$(echo $arm64_response | jq -r '.workflow_runs[0].id')
          echo "Latest ARM64 run ID: $latest_run_arm64"
          echo "ARM64_RUN_ID=$latest_run_arm64" >> $GITHUB_ENV
        shell: bash
      - name: Get ARM64 artifact URL
        id: get_arm64_artifact_url
        run: |
          artifact_url_arm64=$(curl -s -X GET -u ${{ secrets.GH_TOKEN }} "https://api.github.com/repos/gershwin-os/root/actions/runs/${{ env.ARM64_RUN_ID }}/artifacts" | jq -r '.artifacts[0].archive_download_url')
          echo "ARM64 Artifact URL: $artifact_url_arm64"
          echo "ARM64_ARTIFACT_URL=$artifact_url_arm64" >> $GITHUB_ENV
        shell: bash
      - name: Download ARM64 artifact
        run: |
          curl -s -o root_arm64.zip -L -u ${{ secrets.GH_TOKEN }} "${{ env.ARM64_ARTIFACT_URL }}"
        shell: bash
      - name: Build ISO on Debian 12 ARM64
        run: |
          pwd
          ls -la
          du -h -s *
          unzip root_arm64.zip
          ./build.sh
          ls -la live-default
          ls -la
        continue-on-error: true
